//Approach -- Brute force - Accepted

//T.c : O(N*logN);
//S.c : O(N)

class Solution {
    public List<List<Integer>> findMatrix(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int num : nums) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        while (!countMap.isEmpty()) {
            List<Integer> temp = new ArrayList<>();
            for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {
                temp.add(entry.getKey());
                entry.setValue(entry.getValue() - 1);
                if (entry.getValue() == 0) {
                    countMap.remove(entry.getKey());
                }
            }
            ans.add(temp);
        }

        return ans;
    }
}
****************************************************************************************************************************************************************************
//Second Approach -- Optimal Solution
//T.c : O(N)
//S.c : O(N)

class Solution {
    public List<List<Integer>> findMatrix(int[] nums) {
        int n = nums.length;
        int[] mp = new int[n+1];

        List<List<Integer>> result = new ArrayList<>();

        for(int x : nums){
            int freq = mp[x];

            if(freq == result.size()){
                result.add(new ArrayList<>());
            }

            result.get(freq).add(x);
            mp[x]++;
        }

        return result;
    }
}
